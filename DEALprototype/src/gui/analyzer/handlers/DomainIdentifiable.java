package gui.analyzer.handlers;

import gui.analyzer.util.JLabelFinder;
import gui.model.domain.ComponentInfoType;
import gui.model.domain.DomainModel;
import gui.model.domain.Term;
import gui.model.domain.constraint.Constraint;
import gui.model.domain.relation.RelationType;

import java.awt.Component;
import java.util.ArrayList;
import java.util.List;

import javax.swing.Icon;
import javax.swing.JLabel;

/**
 * Serves for extracting domain information from components. Different information can be 
 * extracted from different component types. According to the given type of component 
 * T the implementation of this class extracts the domain information from the component.
 * 
 * @author Michaela Bacikova
 *
 * @param <T> The component class.
 */
public abstract class DomainIdentifiable<T> {
	public abstract String getDomainIdentifier(T component);

	public abstract String getDomainDescriptor(T component);

	public abstract Icon getIcon(T component);
	
	public abstract ComponentInfoType getComponentInfoType(T component);
	
	public boolean extractChildren() {
		return true;
	}

	/**
	 * Creates a new term with the information extracted from the provided component.
	 * The term is created using all available information which are possible to be extracted using this handler.
	 * This information includes:
	 * <ul>
	 * <li>Domain identifier - primary information, usually a name or label or JLabel text.</li>
	 * <li>Domain descriptor - secondary information, usually a toolTip or an actionCommand name</li>
	 * <li>Relations - a relation which is generated by this component, or a relation which is generated by this component's parent.</li>
	 * <li>Icon - sometimes an icon can contain domain information (either text or image).</li>
	 * <li>Constraints - for example: a data type, length, range, enumeration, regex.</li>
	 * </ul>
	 * Also a reference to a the provided component and its class is stored into the Term.
	 * @param component The provided component
	 * @param domainModel The domainModel is used only as a reference, which is stored in each term.
	 * @return A new Term with all information which is possible to extract from the provided component.
	 */
	public Term createTerm(T component, DomainModel domainModel) {
		Term t = new Term(domainModel);

		t.setName(removeUnwantedCharacters(this.getDomainIdentifier(component)));
		
		t.setDescription(this.getDomainDescriptor(component));
		
		t.setLabelForComponent(this.getDomainLabelDescriptor(component));

		RelationType ft = getRelation(component);
		t.setRelation(ft == null ? RelationType.AND : ft);

		t.setComponentClass(component.getClass());
		t.setComponent(component);

		t.setIcon(this.getIcon(component));
		
		t.setConstraints(this.getConstraints(component));
		
		t.setComponentInfoType(this.getComponentInfoType(component));

		t.setExtractChildren(extractChildren());
		
		RelationType parentRelation = getParentRelation(component);
		if (parentRelation != null)
			t.setParentRelation(parentRelation);

		return t;
	}
	
	private String removeUnwantedCharacters(String string) {
		if(string == null || string.isEmpty()) return string;
		if(string.contains(":")) string = string.replaceAll(":", "");
		return string;
	}

	/**
	 * Relation between this component's children.
	 * 
	 * @param component
	 *            this component
	 * @return relation between this component's children.
	 */
	public RelationType getRelation(T component) {
		return RelationType.AND;
	}

	/**
	 * Relation between this component and other components of the same type.
	 * 
	 * @param component
	 *            this component
	 * @return relation between this component and other components of the same
	 *         type - all components have to be in one parent, which generates this relationship.
	 */
	public RelationType getParentRelation(T component) {
		return null;
	}
	
	/**
	 * In Java, a labelFor attribute is available in the JLabel components. This
	 * can be set, if the JLabel component is a label for other component. Using
	 * this attribute we can extract a domain descriptor.
	 * 
	 * @param component
	 *            the component for which the JLabel should be found.
	 * @return the textual label for the provided component extracted from a
	 *         JLabel component with the labelFor attribute set to the provided
	 *         component.
	 */
	public JLabel getDomainLabelDescriptor(T component) {
		if (component instanceof Component) {
			JLabel l = JLabelFinder.findLabelFor((Component) component);
			return l;
		}
		return null;
	}
	
	/**
	 * Returns constraints related to the Term extracted from the provided component.
	 * @warning When overriding this method, please return the constraint list provided by superclass and add new constraints into this list.
	 * @param component The component to be used for extraction.
	 * @return The list of extracted constraints. If no constraints can be extracted for this type of component,
	 * then returns a new ArrayList of constraints.
	 */
	public List<Constraint> getConstraints(T component) {
		return new ArrayList<Constraint>();
	}
}