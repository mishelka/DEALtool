implementation module MyExample
import iTasks, iTasks.API.Extensions.Admin.UserAdmin, iTasks.API.Extensions.Admin.WorkflowAdmin
import Text
/**
* This module contains a series of small examples of basic usage of the iTasks API.
*/

//* Running the tasks in a workflow browser

ge 				:== "Generated Examples"

generatedExamples :: [Workflow]
generatedExamples =
	[workflow (ge +++ "/Generated example 1")	"Example generated by DEAL"			generatedExample
	,workflow "Manage users" 				"Manage system users..." 			manageUsers
	]

Start :: *World -> *World
Start world = startEngine [publish "/" WebApp (\_-> browseExamples generatedExamples),publish "/persons" WebApp (const enterPersons)] world
where
	browseExamples examples = forever (
		 	(viewTitle "iTasks Example Collection"
		||-
		 	enterInformation ("Login","Enter your credentials and login or press continue to remain anonymous") [])
		>>* [WithResult (Action "Login" [ActionIcon "login",ActionKey (unmodified KEY_ENTER)]) (const True) (browseAuthenticated examples)
			,Always (Action "Continue" []) (browseAnonymous examples)
			])
	
	browseAuthenticated examples {Credentials|username,password}
		= authenticateUser username password
		>>= \mbUser -> case mbUser of
			Just user 	= workAs user (manageWorklist examples)
			Nothing		= viewInformation (Title "Login failed") [] "Your username or password is incorrect" >>| return Void
	
	browseAnonymous examples
		= manageWorklist examples
		
		
//* utility functions

undef = undef

always t = const (Just t)

hasValue  tf (Value v _) = Just (tf v)
hasValue _ _ = Nothing

getValue (Value v _) = v

ifValue pred tf (Value v _) = if (pred v) (Just (tf v)) Nothing
ifValue _ _ _ = Nothing

ifStable (Value v stable) = stable
ifStable _ = False

returnF :: (a -> b) (TaskValue a) -> Maybe (Task b) | iTask b
returnF fun (Value v _) = Just (return (fun v))
returnF _ _				= Nothing

returnV :: (TaskValue a) -> Maybe (Task a) | iTask a
returnV (Value v _) = Just (return v)
returnV _			= Nothing

returnP :: (a -> Bool) (TaskValue a) -> Maybe (Task a) | iTask a
returnP pred (Value v _)
	| pred v	= Just (return v)
				= Nothing
returnP _ _		= Nothing

toMaybe :: (TaskValue a) -> Maybe a
toMaybe (Value v _) =  (Just v)
toMaybe _   =  Nothing

getUserName :: User -> String
getUserName u = toString u
//getUserName (AuthenticatedUser id _ (Just name)) = name +++ id
//getUserName _ = "Anonymous"

(>||) infixl 1 :: !(Task a) !(Task b) -> Task b | iTask a & iTask b
(>||) ta tb = ta >>* [WhenStable (const tb)]

//* generated example


#set($i=0)
#foreach( $concept in $language.concepts)
#if(!$generator.isPrimitiveSubtype($concept))
#if(!$generator.isSet($concept))
:: $concept.name = 
	{
	#foreach($property in $concept.getAbstractSyntax()) 
#if($i==0) #set($i=1) #else,#end	$property.name 		:: $generator.getStringTypeFromYajco($property)
	#end
}
#end
#end
#end

#foreach($concept in $language.concepts)
#foreach($property in $concept.getAbstractSyntax())
#if($generator.isNotMutuallyExclusiveType($property))
:: $generator.getStringTypeFromYajco($property) =
	{$generator.getNotMutuallyExclusiveElements($property)}
#end
#end
#end

#foreach($concept in $language.concepts)
#foreach($property in $concept.getAbstractSyntax())
#if($generator.isMutuallyExclusiveType($property))
:: $generator.getStringTypeFromYajco($property) =
	$generator.getMutuallyExclusiveElements($property)
#end
#end
#end

#set($i=0)
#foreach($concept in $language.concepts)#if(!$generator.isPrimitiveSubtype($concept))#set($i=$i+1)#end#end


derive class iTask #foreach($concept in $language.concepts)#if(!$generator.isPrimitiveSubtype($concept))$generator.toFirstLetterUppercase($concept.name)#set($i=$i - 1)#if($i == 0)#else, #end#end#end


generatedExample :: Task $language.getSetting("yajco.mainNode")
generatedExample = enterInformation "Enter $language.getSetting("yajco.mainNode")" []




//* itask original MyPerson
:: MyPerson =
	{ name			:: String
	}
	
derive class iTask MyPerson

enterPersons :: Task [MyPerson]
enterPersons = enterInformation "Enter personal information of multiple people" []
